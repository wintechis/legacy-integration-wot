@prefix : <http://example.org/> .
@prefix capability: <http://purl.org/serviceCapability#> .
@prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#> .
@prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix spdx: <https://spdx.org/rdf/terms/spdx-ontology.owl.xml> .
@prefix zigbee: <https://www.purl.org/SimpleZigbeeInteractionOntology.ttl#> .
sbo:write a capability:WriteInteraction.
sbo:write-without-response a capability:WriteInteraction.
sbo:read a capability:ReadInteraction.
sbo:notify a capability:SubscriptionCommand.
sbo:indicate a capability:SubscriptionCommand.

capability:SubscriptionCommand rdfs:subClassOf capability:Interaction.
capability:WriteInteraction rdfs:subClassOf capability:Interaction.
capability:ReadInteraction rdfs:subClassOf capability:Interaction.

zigbee:Write a capability:WriteInteraction.
zigbee:WriteOptional a capability:WriteInteraction.
zigbee:Read a capability:ReadInteraction.
zigbee:Report a capability:SubscriptionCommand.

zigbee:ClientCommand a capability:ActionInteraction.


:WoTtoBLE capability:writeproperty sbo:write, sbo:write-without-response;
		capability:readproperty sbo:read, sbo:read-without-response;
		capability:invokeaction sbo:write, sbo:write-without-response;
		capability:subscribeevent sbo:notify;
		:affordanceIDMapping :BluetoothToCapabilityMapping.


:ZigbeeCommandToCapabilityMapping a sh:NodeShape ;
	sh:targetClass zigbee:EndNode;
	sh:rule [
		a sh:SPARQLRule;
		rdfs:label "Maps Zigbee Descriptions to the unified affordance model structure. ";
		sh:construct """
		prefix : <http://example.org/> 
		prefix capability: <http://purl.org/serviceCapability#> 
		PREFIX zigbee: <https://www.purl.org/SimpleZigbeeInteractionOntology.ttl#> 
		prefix sh: <http://www.w3.org/ns/shacl#> 
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
		CONSTRUCT {
			?device capability:hasAffordance [
				capability:hasAffordanceID ?affordanceId;
				capability:hasInteraction ?interactionMethod
			];
				capability:hasProtocolStack capability:Zigbee;
				a capability:Device;
				capability:hasAddress ?address.
		} WHERE {
			?device a zigbee:EndNode;
					zigbee:hasIEEEAddress ?address;
					zigbee:hasEndpoint [
				zigbee:hasCluster [
				a zigbee:InCluster;
				zigbee:hasCommand [
				zigbee:hasUUID ?commandUUID
			]; 
				zigbee:hasUUID ?clusterUUID
			]; 
				zigbee:hasUUID ?endpointUUID
			].
			?interaction a ?interactionMethod.

			?interactionMethod rdfs:subClassOf capability:Interaction.
			BIND(CONCAT(STR(?endpointUUID), "/", STR(?clusterUUID), "/", STR(?commandUUID)) as ?affordanceId)
		}
		"""
	]
	.

:ZigbeeAttributeToCapabilityMapping a sh:NodeShape ;
	sh:targetClass zigbee:EndNode;
	sh:rule [
		a sh:SPARQLRule;
		rdfs:label "Maps Zigbee Descriptions to the unified affordance model structure. ";
		sh:construct """
		prefix : <http://example.org/> 
		prefix capability: <http://purl.org/serviceCapability#> 
		PREFIX zigbee: <https://www.purl.org/SimpleZigbeeInteractionOntology.ttl#> 
		prefix sh: <http://www.w3.org/ns/shacl#> 
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
		CONSTRUCT {
			?device capability:hasAffordance [
				capability:hasAffordanceID ?affordanceId;
				capability:hasInteraction ?interactionMethod
			];
				capability:hasProtocolStack capability:Zigbee;
				a capability:Device;
				capability:hasAddress ?address.
		} WHERE {
			?device a zigbee:EndNode;
					zigbee:hasIEEEAddress ?address;
					zigbee:hasEndpoint [
				zigbee:hasCluster [
				a zigbee:InCluster;
				zigbee:hasAttribute [
				zigbee:hasUUID ?attributeUUID;
				zigbee:methodName ?interaction
			]; 
				zigbee:hasUUID ?clusterUUID
			]; 
				zigbee:hasUUID ?endpointUUID
			].
			?interaction a ?interactionMethod.

			?interactionMethod rdfs:subClassOf capability:Interaction.
			BIND(CONCAT(STR(?endpointUUID), "/", STR(?clusterUUID), "/", STR(?attributeUUID)) as ?affordanceId)
		}
		"""
	]
	.

:BluetoothToCapabilityMapping a sh:NodeShape ;
	sh:targetClass sbo:BluetoothLEDevice ;
	sh:rule [ 
		a sh:SPARQLRule;
		rdfs:label "Maps Bluetooth Descriptions to the unified affordance model structure.";
		sh:construct """
		prefix : <http://example.org/> 
		prefix capability: <http://purl.org/serviceCapability#> 
		prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#>
		prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#>
		prefix sh: <http://www.w3.org/ns/shacl#> 
		prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
		prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
		CONSTRUCT {
			$this capability:hasAffordance [
				capability:hasAffordanceID ?affordanceId;
				capability:hasInteraction ?interactionMethod
			];
			capability:hasProtocolStack capability:BluetoothLE;
			a capability:Device;
			capability:hasAddress ?address.
		} WHERE {
			$this a sbo:BluetoothLEDevice;
				sboe:hasAddress [
					sboe:hasMacAddress ?address
				];
				sbo:hasService [
					sbo:hasUUID ?serviceId;
					sbo:hasCharacteristic [
						sbo:hasUUID ?characteristicId;
						sbo:methodName ?interaction
					]
				] .

			?interaction a ?interactionMethod.

			?interactionMethod rdfs:subClassOf capability:Interaction.
			BIND(CONCAT(STR(?serviceId), "/", STR(?characteristicId)) as ?affordanceId)
		}
		"""
	];
	sh:condition :BluetoothLEDeviceConstraints.

:BluetoothToCapabilityMapping a sh:NodeShape ;
	sh:targetClass sbo:BluetoothLEDevice ;
	sh:rule [ 
		a sh:SPARQLRule;
		rdfs:label "Maps Bluetooth Descriptions to the unified affordance model structure.";
		sh:construct """
		prefix : <http://example.org/> 
		prefix capability: <http://purl.org/serviceCapability#> 
		prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#>
		prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#>
		prefix sh: <http://www.w3.org/ns/shacl#> 
		prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
		prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
		CONSTRUCT {
			$this capability:hasAffordance [
				capability:hasAffordanceID ?affordanceId;
				capability:hasInteraction ?interactionMethod
			];
			capability:hasProtocolStack capability:BluetoothLE;
			a capability:Device;
			capability:hasAddress ?address.
		} WHERE {
			$this a sbo:BluetoothLEDevice;
				sboe:hasAddress [
					sboe:hasMacAddress ?address
				];
				sbo:hasService [
					sbo:hasUUID ?serviceId;
					sbo:hasCharacteristic [
						sbo:hasUUID ?characteristicId;
						sbo:methodName ?interaction
					]
				] .

			?interaction a ?interactionMethod.

			?interactionMethod rdfs:subClassOf capability:Interaction.
			BIND(CONCAT(STR(?serviceId), "/", STR(?characteristicId)) as ?affordanceId)
		}
		"""
	];
	sh:condition :BluetoothLEDeviceConstraints.
	
:SBOEDeviceNametoWoT a sh:NodeShape ;
	sh:targetClass sbo:BluetoothLEDevice ;
	sh:rule [ 
		a sh:SPARQLRule;
		rdfs:label "Maps Bluetooth Name to the thing description title.";
		sh:construct """
		prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#>
		prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#>
		prefix td: <https://www.w3.org/2019/wot/td#>
		CONSTRUCT {
			$this td:title ?device_name.
		} WHERE {
			$this a sbo:BluetoothLEDevice;
				sboe:device_name ?device_name.
		}
		"""
	].

:SBOEversionInfotoWoT a sh:NodeShape ;
	sh:targetClass sbo:BluetoothLEDevice ;
	sh:rule [ 
		a sh:SPARQLRule;
		rdfs:label "Maps Bluetooth Name to the thing description title.";
		sh:construct """
		prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#>
		prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#>
		prefix td: <https://www.w3.org/2019/wot/td#>
		prefix schema: <http://schema.org/>
		CONSTRUCT {
			$this td:versionInfo [
				schema:softwareVersion ?softwareVersion;
				td:instance ?firmwareVersion;
				schema:hardwareVersion ?hardwareVersion
			].
		} WHERE {
			$this a sbo:BluetoothLEDevice.

			OPTIONAL {
				$this sboe:firmware_revision ?firmwareVersion
			}
			OPTIONAL {
				$this sboe:software_revision ?softwareVersion
			}
			OPTIONAL {
				$this sboe:hardware_revision ?hardwareVersion 
			}	
				
				
		}
		"""
	].


:SBOESerialNumbertoWoT a sh:NodeShape ;
	sh:targetClass sbo:BluetoothLEDevice ;
	sh:rule [ 
		a sh:SPARQLRule;
		rdfs:label "Maps Bluetooth Name to the thing description title.";
		sh:construct """
		prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#>
		prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#>
		prefix td: <https://www.w3.org/2019/wot/td#>
		prefix schema: <http://schema.org/>
		CONSTRUCT {
			$this schema:serialNumber ?serial_number.
		} WHERE {
			$this a sbo:BluetoothLEDevice;
				sboe:system_id ?serial_number.
		}
		"""
	].



:SBOEManufacturerToWoT a sh:NodeShape ;
	sh:targetClass sbo:BluetoothLEDevice ;
	sh:rule [ 
		a sh:SPARQLRule;
		rdfs:label "Maps Bluetooth Name to the thing description title.";
		sh:construct """
		prefix sbo: <https://freumi.inrupt.net/SimpleBluetoothOntology.ttl#>
		prefix sboe: <https://purl.org/ExtendedSimpleBluetoothOntology#>
		prefix td: <https://www.w3.org/2019/wot/td#>
		prefix schema: <http://schema.org/>
		CONSTRUCT {
			$this schema:manufacturer ?manufacturer_name.
		} WHERE {
			$this a sbo:BluetoothLEDevice;
				sboe:manufacturer_name ?manufacturer_name.
		}
		"""
	].


:BluetoothLEDeviceConstraints a sh:NodeShape;
	sh:targetClass sbo:BluetoothLEDevice;
	sh:property [
		sh:path sbo:hasGAPRole;
		sh:hasValue sbo:Peripheral
	];
	sh:property [
		sh:path sbo:isConnectable;
		sh:hasValue true 
	].